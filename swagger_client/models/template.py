# coding: utf-8

"""
    notifications-api-${var.app_id}

    Notifications API  # noqa: E501

    OpenAPI spec version: 2021-10-30T06:12:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html_part': 'str',
        'subject': 'str',
        'template_id': 'str',
        'sender_id': 'str',
        'text_part': 'str',
        'type': 'str',
        'substitutions': 'list[TemplateSubstitution]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'html_part': 'HtmlPart',
        'subject': 'Subject',
        'template_id': 'TemplateId',
        'sender_id': 'SenderId',
        'text_part': 'TextPart',
        'type': 'Type',
        'substitutions': 'Substitutions',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, html_part=None, subject=None, template_id=None, sender_id=None, text_part=None, type=None, substitutions=None, created_at=None, updated_at=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        self._html_part = None
        self._subject = None
        self._template_id = None
        self._sender_id = None
        self._text_part = None
        self._type = None
        self._substitutions = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if html_part is not None:
            self.html_part = html_part
        if subject is not None:
            self.subject = subject
        if template_id is not None:
            self.template_id = template_id
        if sender_id is not None:
            self.sender_id = sender_id
        if text_part is not None:
            self.text_part = text_part
        if type is not None:
            self.type = type
        if substitutions is not None:
            self.substitutions = substitutions
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def html_part(self):
        """Gets the html_part of this Template.  # noqa: E501


        :return: The html_part of this Template.  # noqa: E501
        :rtype: str
        """
        return self._html_part

    @html_part.setter
    def html_part(self, html_part):
        """Sets the html_part of this Template.


        :param html_part: The html_part of this Template.  # noqa: E501
        :type: str
        """

        self._html_part = html_part

    @property
    def subject(self):
        """Gets the subject of this Template.  # noqa: E501


        :return: The subject of this Template.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Template.


        :param subject: The subject of this Template.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def template_id(self):
        """Gets the template_id of this Template.  # noqa: E501


        :return: The template_id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Template.


        :param template_id: The template_id of this Template.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def sender_id(self):
        """Gets the sender_id of this Template.  # noqa: E501


        :return: The sender_id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this Template.


        :param sender_id: The sender_id of this Template.  # noqa: E501
        :type: str
        """

        self._sender_id = sender_id

    @property
    def text_part(self):
        """Gets the text_part of this Template.  # noqa: E501


        :return: The text_part of this Template.  # noqa: E501
        :rtype: str
        """
        return self._text_part

    @text_part.setter
    def text_part(self, text_part):
        """Sets the text_part of this Template.


        :param text_part: The text_part of this Template.  # noqa: E501
        :type: str
        """

        self._text_part = text_part

    @property
    def type(self):
        """Gets the type of this Template.  # noqa: E501


        :return: The type of this Template.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Template.


        :param type: The type of this Template.  # noqa: E501
        :type: str
        """
        allowed_values = ["COGNITO", "STANDARD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def substitutions(self):
        """Gets the substitutions of this Template.  # noqa: E501


        :return: The substitutions of this Template.  # noqa: E501
        :rtype: list[TemplateSubstitution]
        """
        return self._substitutions

    @substitutions.setter
    def substitutions(self, substitutions):
        """Sets the substitutions of this Template.


        :param substitutions: The substitutions of this Template.  # noqa: E501
        :type: list[TemplateSubstitution]
        """

        self._substitutions = substitutions

    @property
    def created_at(self):
        """Gets the created_at of this Template.  # noqa: E501


        :return: The created_at of this Template.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Template.


        :param created_at: The created_at of this Template.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Template.  # noqa: E501


        :return: The updated_at of this Template.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Template.


        :param updated_at: The updated_at of this Template.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
