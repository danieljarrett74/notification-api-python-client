# coding: utf-8

"""
    notifications-api-${var.app_id}

    Notifications API  # noqa: E501

    OpenAPI spec version: 2021-10-30T06:12:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender_id': 'str',
        'email_address': 'str',
        'name': 'str',
        'user_pool_id': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'sender_id': 'SenderId',
        'email_address': 'EmailAddress',
        'name': 'Name',
        'user_pool_id': 'UserPoolId',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, sender_id=None, email_address=None, name=None, user_pool_id=None, created_at=None, updated_at=None):  # noqa: E501
        """Sender - a model defined in Swagger"""  # noqa: E501
        self._sender_id = None
        self._email_address = None
        self._name = None
        self._user_pool_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.sender_id = sender_id
        self.email_address = email_address
        if name is not None:
            self.name = name
        if user_pool_id is not None:
            self.user_pool_id = user_pool_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def sender_id(self):
        """Gets the sender_id of this Sender.  # noqa: E501


        :return: The sender_id of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this Sender.


        :param sender_id: The sender_id of this Sender.  # noqa: E501
        :type: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")  # noqa: E501

        self._sender_id = sender_id

    @property
    def email_address(self):
        """Gets the email_address of this Sender.  # noqa: E501


        :return: The email_address of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Sender.


        :param email_address: The email_address of this Sender.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def name(self):
        """Gets the name of this Sender.  # noqa: E501


        :return: The name of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sender.


        :param name: The name of this Sender.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this Sender.  # noqa: E501


        :return: The user_pool_id of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this Sender.


        :param user_pool_id: The user_pool_id of this Sender.  # noqa: E501
        :type: str
        """

        self._user_pool_id = user_pool_id

    @property
    def created_at(self):
        """Gets the created_at of this Sender.  # noqa: E501


        :return: The created_at of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Sender.


        :param created_at: The created_at of this Sender.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Sender.  # noqa: E501


        :return: The updated_at of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Sender.


        :param updated_at: The updated_at of this Sender.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
