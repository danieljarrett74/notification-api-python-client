# coding: utf-8

"""
    notifications-api-${var.app_id}

    Notifications API  # noqa: E501

    OpenAPI spec version: 2021-10-30T06:12:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id': 'str',
        'sender_id': 'str',
        'substitutions': 'list[Substitution]',
        'recipient_email': 'str'
    }

    attribute_map = {
        'template_id': 'TemplateId',
        'sender_id': 'SenderId',
        'substitutions': 'Substitutions',
        'recipient_email': 'RecipientEmail'
    }

    def __init__(self, template_id=None, sender_id=None, substitutions=None, recipient_email=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._template_id = None
        self._sender_id = None
        self._substitutions = None
        self._recipient_email = None
        self.discriminator = None
        self.template_id = template_id
        if sender_id is not None:
            self.sender_id = sender_id
        if substitutions is not None:
            self.substitutions = substitutions
        self.recipient_email = recipient_email

    @property
    def template_id(self):
        """Gets the template_id of this Message.  # noqa: E501


        :return: The template_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Message.


        :param template_id: The template_id of this Message.  # noqa: E501
        :type: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def sender_id(self):
        """Gets the sender_id of this Message.  # noqa: E501


        :return: The sender_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this Message.


        :param sender_id: The sender_id of this Message.  # noqa: E501
        :type: str
        """

        self._sender_id = sender_id

    @property
    def substitutions(self):
        """Gets the substitutions of this Message.  # noqa: E501


        :return: The substitutions of this Message.  # noqa: E501
        :rtype: list[Substitution]
        """
        return self._substitutions

    @substitutions.setter
    def substitutions(self, substitutions):
        """Sets the substitutions of this Message.


        :param substitutions: The substitutions of this Message.  # noqa: E501
        :type: list[Substitution]
        """

        self._substitutions = substitutions

    @property
    def recipient_email(self):
        """Gets the recipient_email of this Message.  # noqa: E501


        :return: The recipient_email of this Message.  # noqa: E501
        :rtype: str
        """
        return self._recipient_email

    @recipient_email.setter
    def recipient_email(self, recipient_email):
        """Sets the recipient_email of this Message.


        :param recipient_email: The recipient_email of this Message.  # noqa: E501
        :type: str
        """
        if recipient_email is None:
            raise ValueError("Invalid value for `recipient_email`, must not be `None`")  # noqa: E501

        self._recipient_email = recipient_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
